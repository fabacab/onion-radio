---
- name: Deploy Onion Radio.
  hosts: all
  become: true

  vars:
      tor_onion_services_backup_dir: "backup"

  tasks:
      - name: Recreate Onion service with private key.
        import_role:
            name: anarchotechnyc.tor
        when: onion_radio_private_key_file is defined
        vars:
            onion_services:
                - name: onion_radio
                  private_key_file: "{{ onion_radio_private_key_file }}"
                  virtports:
                      # The streaming client's port.
                      - port_number: 8000
                      # The Web browser's port.
                      - port_number: 80
                        target_port: 8000

      - name: Create new Onion service.
        import_role:
            name: anarchotechnyc.tor
        when: onion_radio_private_key_file is not defined
        vars:
            onion_services:
                - name: onion_radio
                  virtports:
                      # The streaming client's port.
                      - port_number: 8000
                      # The Web browser's port.
                      - port_number: 80
                        target_port: 8000

      - name: Register onion.
        slurp:
            src: /var/lib/tor/onion-services/onion_radio/hostname
        register: onion_radio_domain

      - name: Deploy Icecast.
        import_role:
            name: anarchotechnyc.icecast
        vars:
            icecast_hostname: "{{ onion_radio_domain.content | b64decode | trim | default('localhost') }}"

- name: Verify Onion Radio is operational.
  hosts: all
  tasks:
      - name: Verify Icecast is running.
        uri:
            url: http://localhost:8000/
            return_content: true
        register: r
        failed_when: "'Icecast' not in r.content"

      - assert:
          that:
              - onion_radio_domain.content
          fail_msg: "Cannot identify Onion domain."
          success_msg: "Onion Radio online at: http://{{ onion_radio_domain.content | b64decode | trim }}/"
